; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31629.0 

	TITLE	D:\BSTU\2 sem\KPO\Labs\1 lab\lab1\first task\Debug\first task.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F27E49E1_first task@pch DB 01H
__9FA8BB4C_corecrt_math@h DB 01H
__1325181E_xlocinfo DB 01H
__0CACFBD6_typeinfo DB 01H
__83E9158C_vcruntime_typeinfo@h DB 01H
__D5779D54_stdafx@cpp DB 01H
__3EF2B46B_memory DB 01H
__3677C06E_streambuf DB 01H
__5F67261C_stdio@h DB 01H
__4C2892DF_corecrt_stdio_config@h DB 01H
__722B4CE0_xlocnum DB 01H
__6DDFBF8F_iterator DB 01H
__2DD4BB99_utility DB 01H
__825CB8E5_limits DB 01H
__BD99428F_exception DB 01H
__AB5758BB_vcruntime_new@h DB 01H
__7C7308CF_xutility DB 01H
__78340504_type_traits DB 01H
__DACB2C8B_xstddef DB 01H
__33925EC6_xstring DB 01H
__4741D85A_xmemory DB 01H
__50113343_system_error DB 01H
__34D778D2_stdexcept DB 01H
__B6F1CB87_vcruntime_exception@h DB 01H
__0B1C41AB_ios DB 01H
__2AC06F0D_xiosbase DB 01H
__ECAC2AF7_xlocale DB 01H
__12B7E364_xfacet DB 01H
__FFBCF033_ostream DB 01H
__9C6CC509_istream DB 01H
__7EACE690_first task@cpp DB 01H
__FCDCC866_stdafx@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_07PEAPJBGG@Russian@			; `string'
PUBLIC	??_C@_08BNCFKGEO@color?570@			; `string'
PUBLIC	??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0CI@LHMJEGCL@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@ ; `string'
PUBLIC	??_C@_0CN@HANHODJO@1?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?c?n?d@ ; `string'
PUBLIC	??_C@_0CD@GHHGOGBE@2?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?m?n?l?e?p?$OA?5?d?m?$PP?5?b?5?c?n@ ; `string'
PUBLIC	??_C@_0DB@KOIEFGJD@3?5?$JG?5?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA@ ; `string'
PUBLIC	??_C@_0BI@FMILIMEF@4?5?$JG?5?b?$PL?u?n?d?5?h?g?5?o?p?n?c?p?$OA?l?l?$PL?4@ ; `string'
PUBLIC	??_C@_0BB@DHLHLGFA@?H?d?$LI?r?5?o?p?n?b?e?p?j?$OA?4?4?4@ ; `string'
PUBLIC	??_C@_0BL@OEJNGOKD@?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@ ; `string'
PUBLIC	??_C@_0BO@EOOBDIMN@?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@ ; `string'
PUBLIC	??_C@_0O@HKCBJMLE@?5?d?m?$LI?l?5?b?5?c?n?d?s?$CB@ ; `string'
PUBLIC	??_C@_0L@MKFECEDL@?5?$PP?b?k?$PP?e?r?q?$PP?5@	; `string'
PUBLIC	??_C@_0CK@KAKLFGFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n?p@ ; `string'
PUBLIC	??_C@_0CE@HCGLHDCF@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@ ; `string'
PUBLIC	??_C@_06DLLCAMCB@?5?d?m?e?i?$CB@		; `string'
PUBLIC	??_C@_0CG@IGLIBEAG@?D?n?5?q?k?e?d?s?$PO?y?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA@ ; `string'
PUBLIC	??_C@_0CM@DOBBBOAA@?A?k?$OA?c?n?d?$OA?p?h?l?5?g?$OA?5?o?n?k?$PM?g?n?b?$OA?m?h?e?5?m?$OA?x?e?i@ ; `string'
PUBLIC	??_C@_0GB@IFHIMGON@?B?$OA?l?h?5?a?$PL?k?$OA?5?b?b?e?d?e?m?$OA?5?m?e?n?o?$OA?g?m?$OA?m?$OA?$PP?5?j@ ; `string'
PUBLIC	??_C@_0BD@EFHGFFAL@?O?n?b?r?n?p?h?r?e?5?b?$OA?x?5?b?b?n?d@ ; `string'
EXTRN	__imp__system:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	?LEAP_YEAR_CHECK@@YA_NH@Z:PROC			; LEAP_YEAR_CHECK
EXTRN	?DAY_NUMBER@@YAHHH@Z:PROC			; DAY_NUMBER
EXTRN	?LEAP_YEAR_DAY@@YA_NHH@Z:PROC			; LEAP_YEAR_DAY
EXTRN	?datecheck@@YA_NHHHH@Z:PROC			; datecheck
EXTRN	?BIRTHDAY_COUNT@@YAHHHHHH@Z:PROC		; BIRTHDAY_COUNT
EXTRN	?birthday_datecheck@@YA_NHHHH@Z:PROC		; birthday_datecheck
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BD@EFHGFFAL@?O?n?b?r?n?p?h?r?e?5?b?$OA?x?5?b?b?n?d@
CONST	SEGMENT
??_C@_0BD@EFHGFFAL@?O?n?b?r?n?p?h?r?e?5?b?$OA?x?5?b?b?n?d@ DB 0cfH, 0eeH, 0e2H
	DB	0f2H, 0eeH, 0f0H, 0e8H, 0f2H, 0e5H, ' ', 0e2H, 0e0H, 0f8H, ' ', 0e2H
	DB	0e2H, 0eeH, 0e4H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@IFHIMGON@?B?$OA?l?h?5?a?$PL?k?$OA?5?b?b?e?d?e?m?$OA?5?m?e?n?o?$OA?g?m?$OA?m?$OA?$PP?5?j@
CONST	SEGMENT
??_C@_0GB@IFHIMGON@?B?$OA?l?h?5?a?$PL?k?$OA?5?b?b?e?d?e?m?$OA?5?m?e?n?o?$OA?g?m?$OA?m?$OA?$PP?5?j@ DB 0c2H
	DB	0e0H, 0ecH, 0e8H, ' ', 0e1H, 0fbH, 0ebH, 0e0H, ' ', 0e2H, 0e2H
	DB	0e5H, 0e4H, 0e5H, 0edH, 0e0H, ' ', 0edH, 0e5H, 0eeH, 0efH, 0e0H
	DB	0e7H, 0edH, 0e0H, 0edH, 0e0H, 0ffH, ' ', 0eaH, 0eeH, 0ecH, 0ecH
	DB	0e0H, 0edH, 0e4H, 0e0H, '. ', 0c4H, 0ebH, 0ffH, ' ', 0e8H, 0f1H
	DB	0efH, 0eeH, 0ebH, 0fcH, 0e7H, 0eeH, 0e2H, 0e0H, 0edH, 0e8H, 0ffH
	DB	' ', 0e4H, 0e0H, 0edH, 0edH, 0eeH, 0e3H, 0eeH, ' ', 0efH, 0f0H
	DB	0eeH, 0e4H, 0f3H, 0eaH, 0f2H, 0e0H, ' ', 0e8H, 0f1H, 0efH, 0eeH
	DB	0ebH, 0fcH, 0e7H, 0f3H, 0e9H, 0f2H, 0e5H, ' ', 0f6H, 0e8H, 0f4H
	DB	0f0H, 0fbH, ' 1-4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DOBBBOAA@?A?k?$OA?c?n?d?$OA?p?h?l?5?g?$OA?5?o?n?k?$PM?g?n?b?$OA?m?h?e?5?m?$OA?x?e?i@
CONST	SEGMENT
??_C@_0CM@DOBBBOAA@?A?k?$OA?c?n?d?$OA?p?h?l?5?g?$OA?5?o?n?k?$PM?g?n?b?$OA?m?h?e?5?m?$OA?x?e?i@ DB 0c1H
	DB	0ebH, 0e0H, 0e3H, 0eeH, 0e4H, 0e0H, 0f0H, 0e8H, 0ecH, ' ', 0e7H
	DB	0e0H, ' ', 0efH, 0eeH, 0ebH, 0fcH, 0e7H, 0eeH, 0e2H, 0e0H, 0edH
	DB	0e8H, 0e5H, ' ', 0edH, 0e0H, 0f8H, 0e5H, 0e9H, ' ', 0efH, 0f0H
	DB	0eeH, 0e4H, 0f3H, 0eaH, 0f6H, 0e8H, 0e5H, 0e9H, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IGLIBEAG@?D?n?5?q?k?e?d?s?$PO?y?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA@
CONST	SEGMENT
??_C@_0CG@IGLIBEAG@?D?n?5?q?k?e?d?s?$PO?y?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA@ DB 0c4H
	DB	0eeH, ' ', 0f1H, 0ebH, 0e5H, 0e4H, 0f3H, 0feH, 0f9H, 0e5H, 0e3H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ' ', 0eeH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H
	DB	0fcH, ': ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLLCAMCB@?5?d?m?e?i?$CB@
CONST	SEGMENT
??_C@_06DLLCAMCB@?5?d?m?e?i?$CB@ DB ' ', 0e4H, 0edH, 0e5H, 0e9H, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HCGLHDCF@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@
CONST	SEGMENT
??_C@_0CE@HCGLHDCF@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@ DB 0cfH
	DB	0eeH, 0e2H, 0f2H, 0eeH, 0f0H, 0e8H, 0f2H, 0e5H, ' ', 0e2H, 0e2H
	DB	0eeH, 0e4H, ' ', 0e4H, 0e0H, 0f2H, 0fbH, ' ', 0e2H, ' ', 0f4H, 0eeH
	DB	0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H, 0c4H, 0ccH, 0ccH, ':', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KAKLFGFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n?p@
CONST	SEGMENT
??_C@_0CK@KAKLFGFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n?p@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH
	DB	0e8H, 0ffH, ' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H
	DB	0e5H, ' ', 0c4H, 0c4H, 0ccH, 0ccH, ':', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKFECEDL@?5?$PP?b?k?$PP?e?r?q?$PP?5@
CONST	SEGMENT
??_C@_0L@MKFECEDL@?5?$PP?b?k?$PP?e?r?q?$PP?5@ DB ' ', 0ffH, 0e2H, 0ebH, 0ffH
	DB	0e5H, 0f2H, 0f1H, 0ffH, ' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HKCBJMLE@?5?d?m?$LI?l?5?b?5?c?n?d?s?$CB@
CONST	SEGMENT
??_C@_0O@HKCBJMLE@?5?d?m?$LI?l?5?b?5?c?n?d?s?$CB@ DB ' ', 0e4H, 0edH, 0b8H
	DB	0ecH, ' ', 0e2H, ' ', 0e3H, 0eeH, 0e4H, 0f3H, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EOOBDIMN@?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@
CONST	SEGMENT
??_C@_0BO@EOOBDIMN@?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@ DB ' '
	DB	0edH, 0e5H, ' ', 0ffH, 0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H, 0ffH
	DB	' ', 0e2H, 0e8H, 0f1H, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0ecH, ' ', 0e3H
	DB	0eeH, 0e4H, 0eeH, 0ecH, '!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OEJNGOKD@?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@
CONST	SEGMENT
??_C@_0BL@OEJNGOKD@?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@ DB ' '
	DB	0ffH, 0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H, 0ffH, ' ', 0e2H, 0e8H
	DB	0f1H, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0ecH, ' ', 0e3H, 0eeH, 0e4H
	DB	0eeH, 0ecH, '!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DHLHLGFA@?H?d?$LI?r?5?o?p?n?b?e?p?j?$OA?4?4?4@
CONST	SEGMENT
??_C@_0BB@DHLHLGFA@?H?d?$LI?r?5?o?p?n?b?e?p?j?$OA?4?4?4@ DB 0c8H, 0e4H, 0b8H
	DB	0f2H, ' ', 0efH, 0f0H, 0eeH, 0e2H, 0e5H, 0f0H, 0eaH, 0e0H, '..'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FMILIMEF@4?5?$JG?5?b?$PL?u?n?d?5?h?g?5?o?p?n?c?p?$OA?l?l?$PL?4@
CONST	SEGMENT
??_C@_0BI@FMILIMEF@4?5?$JG?5?b?$PL?u?n?d?5?h?g?5?o?p?n?c?p?$OA?l?l?$PL?4@ DB '4'
	DB	' ', 096H, ' ', 0e2H, 0fbH, 0f5H, 0eeH, 0e4H, ' ', 0e8H, 0e7H, ' '
	DB	0efH, 0f0H, 0eeH, 0e3H, 0f0H, 0e0H, 0ecH, 0ecH, 0fbH, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KOIEFGJD@3?5?$JG?5?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA@
CONST	SEGMENT
??_C@_0DB@KOIEFGJD@3?5?$JG?5?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA@ DB '3'
	DB	' ', 096H, ' ', 0e2H, 0fbH, 0f7H, 0e8H, 0f1H, 0ebH, 0e8H, 0f2H
	DB	0fcH, ' ', 0f1H, 0eaH, 0eeH, 0ebH, 0fcH, 0eaH, 0eeH, ' ', 0e4H
	DB	0edH, 0e5H, 0e9H, ' ', 0eeH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H
	DB	0fcH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GHHGOGBE@2?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?m?n?l?e?p?$OA?5?d?m?$PP?5?b?5?c?n@
CONST	SEGMENT
??_C@_0CD@GHHGOGBE@2?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?m?n?l?e?p?$OA?5?d?m?$PP?5?b?5?c?n@ DB '2'
	DB	' ', 096H, ' ', 0eeH, 0efH, 0f0H, 0e5H, 0e4H, 0e5H, 0ebH, 0e5H
	DB	0edH, 0e8H, 0e5H, ' ', 0edH, 0eeH, 0ecH, 0e5H, 0f0H, 0e0H, ' ', 0e4H
	DB	0edH, 0ffH, ' ', 0e2H, ' ', 0e3H, 0eeH, 0e4H, 0f3H, ';', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HANHODJO@1?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?c?n?d@
CONST	SEGMENT
??_C@_0CN@HANHODJO@1?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?c?n?d@ DB '1'
	DB	' ', 096H, ' ', 0eeH, 0efH, 0f0H, 0e5H, 0e4H, 0e5H, 0ebH, 0e5H
	DB	0edH, 0e8H, 0e5H, ' ', 0ffH, 0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H
	DB	0ffH, ' ', 0ebH, 0e8H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0e2H, 0e8H, 0f1H
	DB	0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0ecH, '; ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LHMJEGCL@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@
CONST	SEGMENT
??_C@_0CI@LHMJEGCL@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@ DB 0cfH
	DB	0eeH, 0e2H, 0f2H, 0eeH, 0f0H, 0e8H, 0f2H, 0e5H, ' ', 0e2H, 0e2H
	DB	0eeH, 0e4H, ' ', 0e4H, 0e0H, 0f2H, 0fbH, ' ', 0e2H, ' ', 0f4H, 0eeH
	DB	0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H, 0c4H, 0ccH, 0ccH, 0c3H
	DB	0c3H, 0c3H, 0c3H, ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ':', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNCFKGEO@color?570@
CONST	SEGMENT
??_C@_08BNCFKGEO@color?570@ DB 'color 70', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEAPJBGG@Russian@
CONST	SEGMENT
??_C@_07PEAPJBGG@Russian@ DB 'Russian', 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0432H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0477H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	0923H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 123  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 125  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 118  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 119  :             }
; 120  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 92   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 94   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 100  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 105  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 79   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 81   :             }
; 82   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 72   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 74   :             }
; 75   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv280 = -352						; size = 4
tv275 = -352						; size = 4
tv314 = -348						; size = 8
tv279 = -348						; size = 4
tv277 = -348						; size = 4
tv274 = -348						; size = 4
tv276 = -344						; size = 4
tv65 = -344						; size = 4
tv278 = -341						; size = 1
tv273 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 806  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, char _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 807  :     // insert a char into char stream
; 808  :     using _Elem = char;
; 809  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 810  : 
; 811  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 812  :     const typename _Myos::sentry _Ok(_Ostr);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 813  : 
; 814  :     if (_Ok) { // state okay, insert

  00068	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	0f 84 3a 03 00
	00		 je	 $LN8@operator

; 815  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00083	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00086	8b f4		 mov	 esi, esp
  00088	8b ca		 mov	 ecx, edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  0009d	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv314[ebp+4], edx
  000a3	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv314[ebp+4], 0
  000aa	7f 18		 jg	 SHORT $LN15@operator
  000ac	7c 09		 jl	 SHORT $LN22@operator
  000ae	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR tv314[ebp], 1
  000b5	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  000c2	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000cf	8b f4		 mov	 esi, esp
  000d1	8b ca		 mov	 ecx, edx
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	83 e8 01	 sub	 eax, 1
  000e3	83 da 00	 sbb	 edx, 0
  000e6	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000ec	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000f2	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000f8	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000fe	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  00101	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 816  : 
; 817  :         _TRY_IO_BEGIN

  00104	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 818  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00108	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00110	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00113	8b f4		 mov	 esi, esp
  00115	8b ca		 mov	 ecx, edx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0011d	3b f4		 cmp	 esi, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0012a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00130	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00135	83 f8 40	 cmp	 eax, 64			; 00000040H
  00138	0f 84 dd 00 00
	00		 je	 $LN10@operator

; 819  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0013e	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00140	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00143	83 e8 01	 sub	 eax, 1
  00146	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  00149	83 d9 00	 sbb	 ecx, 0
  0014c	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  0014f	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
  00152	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00156	0f 85 bf 00 00
	00		 jne	 $LN10@operator
  0015c	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00160	0f 8c b5 00 00
	00		 jl	 $LN10@operator
  00166	7f 0a		 jg	 SHORT $LN23@operator
  00168	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  0016c	0f 86 a9 00 00
	00		 jbe	 $LN10@operator
$LN23@operator:

; 820  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00172	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00175	8b 08		 mov	 ecx, DWORD PTR [eax]
  00177	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0017a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0017d	8b f4		 mov	 esi, esp
  0017f	8b ca		 mov	 ecx, edx
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv273[ebp], al
  00194	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00197	8b 08		 mov	 ecx, DWORD PTR [eax]
  00199	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0019c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0019f	8b f4		 mov	 esi, esp
  001a1	8b ca		 mov	 ecx, edx
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a9	3b f4		 cmp	 esi, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b0	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001b6	8b f4		 mov	 esi, esp
  001b8	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv273[ebp]
  001bf	50		 push	 eax
  001c0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001cc	3b f4		 cmp	 esi, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  001d9	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  001df	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001e5	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001ea	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001f0	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001f6	52		 push	 edx
  001f7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00203	83 c4 08	 add	 esp, 8
  00206	0f b6 c8	 movzx	 ecx, al
  00209	85 c9		 test	 ecx, ecx
  0020b	74 09		 je	 SHORT $LN11@operator

; 821  :                     _State |= ios_base::badbit;

  0020d	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00210	83 c8 04	 or	 eax, 4
  00213	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 822  :                 }
; 823  :             }

  00216	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 824  :         }
; 825  : 
; 826  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  0021b	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0021f	75 7f		 jne	 SHORT $LN12@operator
  00221	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00229	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0022c	8b f4		 mov	 esi, esp
  0022e	8b ca		 mov	 ecx, edx
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00236	3b f4		 cmp	 esi, esp
  00238	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00243	8b f4		 mov	 esi, esp
  00245	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00249	50		 push	 eax
  0024a	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv277[ebp], eax
  00263	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv277[ebp]
  00269	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0026f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00274	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0027a	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00280	52		 push	 edx
  00281	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0028d	83 c4 08	 add	 esp, 8
  00290	0f b6 c8	 movzx	 ecx, al
  00293	85 c9		 test	 ecx, ecx
  00295	74 09		 je	 SHORT $LN12@operator

; 827  :             _State |= ios_base::badbit;

  00297	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0029a	83 c8 04	 or	 eax, 4
  0029d	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 828  :         }
; 829  : 
; 830  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  002a0	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a2	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  002a5	83 e8 01	 sub	 eax, 1
  002a8	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  002ab	83 d9 00	 sbb	 ecx, 0
  002ae	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  002b1	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
  002b4	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002b8	0f 85 bf 00 00
	00		 jne	 $LN6@operator
  002be	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  002c2	0f 8c b5 00 00
	00		 jl	 $LN6@operator
  002c8	7f 0a		 jg	 SHORT $LN24@operator
  002ca	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  002ce	0f 86 a9 00 00
	00		 jbe	 $LN6@operator
$LN24@operator:

; 831  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002d4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002df	8b f4		 mov	 esi, esp
  002e1	8b ca		 mov	 ecx, edx
  002e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002e9	3b f4		 cmp	 esi, esp
  002eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f0	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv278[ebp], al
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  00318	8b f4		 mov	 esi, esp
  0031a	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv278[ebp]
  00321	50		 push	 eax
  00322	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00328	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0032e	3b f4		 cmp	 esi, esp
  00330	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00335	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  0033b	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv280[ebp]
  00341	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00347	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0034c	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00352	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00358	52		 push	 edx
  00359	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00365	83 c4 08	 add	 esp, 8
  00368	0f b6 c8	 movzx	 ecx, al
  0036b	85 c9		 test	 ecx, ecx
  0036d	74 09		 je	 SHORT $LN13@operator

; 832  :                 _State |= ios_base::badbit;

  0036f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00372	83 c8 04	 or	 eax, 4
  00375	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 833  :             }
; 834  :         }

  00378	e9 25 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0037d	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 835  :         _CATCH_IO_(ios_base, _Ostr)

  0037f	8b f4		 mov	 esi, esp
  00381	6a 01		 push	 1
  00383	6a 04		 push	 4
  00385	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00388	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00390	8b ca		 mov	 ecx, edx
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00398	3b f4		 cmp	 esi, esp
  0039a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039f	b8 00 00 00 00	 mov	 eax, $LN21@operator
  003a4	c3		 ret	 0
$LN17@operator:
  003a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ac	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  003ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 836  :     }
; 837  : 
; 838  :     _Ostr.width(0);

  003b5	8b f4		 mov	 esi, esp
  003b7	6a 00		 push	 0
  003b9	6a 00		 push	 0
  003bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003be	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c6	8b ca		 mov	 ecx, edx
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 839  :     _Ostr.setstate(_State);

  003d5	8b f4		 mov	 esi, esp
  003d7	6a 00		 push	 0
  003d9	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003dc	50		 push	 eax
  003dd	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e5	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ee	3b f4		 cmp	 esi, esp
  003f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 840  :     return _Ostr;

  003f5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f8	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00405	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00408	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0040d	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 841  : }

  00413	52		 push	 edx
  00414	8b cd		 mov	 ecx, ebp
  00416	50		 push	 eax
  00417	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  0041d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00422	58		 pop	 eax
  00423	5a		 pop	 edx
  00424	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00427	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042e	59		 pop	 ecx
  0042f	5f		 pop	 edi
  00430	5e		 pop	 esi
  00431	5b		 pop	 ebx
  00432	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00435	33 cd		 xor	 ecx, ebp
  00437	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043c	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00442	3b ec		 cmp	 ebp, esp
  00444	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00449	8b e5		 mov	 esp, ebp
  0044b	5d		 pop	 ebp
  0044c	c3		 ret	 0
  0044d	0f 1f 00	 npad	 3
$LN28@operator:
  00450	01 00 00 00	 DD	 1
  00454	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  00458	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0045c	08 00 00 00	 DD	 8
  00460	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  00464	5f		 DB	 95			; 0000005fH
  00465	4f		 DB	 79			; 0000004fH
  00466	6b		 DB	 107			; 0000006bH
  00467	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1005 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1006 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1007 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1008 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1009 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 761  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __FFBCF033_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 762  :     // insert NTBS into char stream
; 763  :     using _Elem = char;
; 764  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 765  : 
; 766  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 767  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 768  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 769  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 770  : 
; 771  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 772  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 773  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 774  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 775  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 776  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 777  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 778  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 779  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 780  :                 }
; 781  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 785  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 786  :         }
; 787  : 
; 788  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 791  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 792  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 793  :                 }
; 794  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 795  :         }
; 796  : 
; 797  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 798  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 799  :     }
; 800  : 
; 801  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 802  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 803  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 sem\KPO\Labs\1 lab\lab1\first task\first task.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv578 = -348						; size = 4
tv574 = -348						; size = 4
tv576 = -344						; size = 4
tv572 = -344						; size = 4
tv152 = -344						; size = 4
$T1 = -333						; size = 1
$T2 = -321						; size = 1
$T3 = -309						; size = 1
_b_month$4 = -108					; size = 4
_b_day$5 = -96						; size = 4
_birthday_date$6 = -84					; size = 4
_date_check$ = -69					; size = 1
_k$ = -60						; size = 4
_year$ = -48						; size = 4
_month$ = -36						; size = 4
_day$ = -24						; size = 4
_date$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-156]
  00012	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	c6 85 b3 fe ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0002f	c6 85 bf fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00036	c6 85 cb fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __7EACE690_first task@cpp
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 7    :     setlocale(LC_CTYPE, "Russian");

  00047	8b f4		 mov	 esi, esp
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_07PEAPJBGG@Russian@
  0004e	6a 02		 push	 2
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00056	83 c4 08	 add	 esp, 8
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8    :     system("color 70");

  00060	8b f4		 mov	 esi, esp
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_08BNCFKGEO@color?570@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  0006d	83 c4 04	 add	 esp, 4
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 9    :     int date, day,month,year , k = 0;

  00077	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 10   :     bool date_check = false;

  0007e	c6 45 bb 00	 mov	 BYTE PTR _date_check$[ebp], 0

; 11   :     cout << "Введите дату в формате ДДММГГГГ:";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GCCJPHFL@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00092	83 c4 08	 add	 esp, 8
$LN2@main:

; 12   : 
; 13   :     while (k != 4) {

  00095	83 7d c4 04	 cmp	 DWORD PTR _k$[ebp], 4
  00099	0f 84 6a 08 00
	00		 je	 $LN3@main
$LN4@main:

; 14   :         
; 15   :         while (!date_check) {

  0009f	0f b6 45 bb	 movzx	 eax, BYTE PTR _date_check$[ebp]
  000a3	85 c0		 test	 eax, eax
  000a5	0f 85 02 01 00
	00		 jne	 $LN5@main

; 16   :             cin.clear();

  000ab	8b f4		 mov	 esi, esp
  000ad	6a 00		 push	 0
  000af	6a 00		 push	 0
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000be	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c1	8b ca		 mov	 ecx, edx
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   :             cin >> date;

  000d0	8b f4		 mov	 esi, esp
  000d2	8d 45 f4	 lea	 eax, DWORD PTR _date$[ebp]
  000d5	50		 push	 eax
  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  000e2	3b f4		 cmp	 esi, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 18   :             day = date / 1000000;

  000e9	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  000ec	99		 cdq
  000ed	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000f2	f7 f9		 idiv	 ecx
  000f4	c6 85 cb fe ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  000fb	89 45 e8	 mov	 DWORD PTR _day$[ebp], eax

; 19   :             month = (date / 10000) % 100;

  000fe	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  00101	99		 cdq
  00102	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00107	f7 f9		 idiv	 ecx
  00109	99		 cdq
  0010a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0010f	f7 f9		 idiv	 ecx
  00111	c6 85 bf fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00118	89 55 dc	 mov	 DWORD PTR _month$[ebp], edx

; 20   :             year = date % 10000;

  0011b	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  0011e	99		 cdq
  0011f	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00124	f7 f9		 idiv	 ecx
  00126	c6 85 b3 fe ff
	ff 01		 mov	 BYTE PTR $T1[ebp], 1
  0012d	89 55 d0	 mov	 DWORD PTR _year$[ebp], edx

; 21   :             date_check=datecheck(day, month, year, date);

  00130	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00137	75 0d		 jne	 SHORT $LN25@main
  00139	68 00 00 00 00	 push	 OFFSET $LN26@main
  0013e	e8 00 00 00 00	 call	 __RTC_UninitUse
  00143	83 c4 04	 add	 esp, 4
$LN25@main:
  00146	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  0014d	75 0d		 jne	 SHORT $LN27@main
  0014f	68 00 00 00 00	 push	 OFFSET $LN28@main
  00154	e8 00 00 00 00	 call	 __RTC_UninitUse
  00159	83 c4 04	 add	 esp, 4
$LN27@main:
  0015c	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00163	75 0d		 jne	 SHORT $LN29@main
  00165	68 00 00 00 00	 push	 OFFSET $LN30@main
  0016a	e8 00 00 00 00	 call	 __RTC_UninitUse
  0016f	83 c4 04	 add	 esp, 4
$LN29@main:
  00172	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  00175	50		 push	 eax
  00176	8b 4d d0	 mov	 ecx, DWORD PTR _year$[ebp]
  00179	51		 push	 ecx
  0017a	8b 55 dc	 mov	 edx, DWORD PTR _month$[ebp]
  0017d	52		 push	 edx
  0017e	8b 45 e8	 mov	 eax, DWORD PTR _day$[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?datecheck@@YA_NHHHH@Z	; datecheck
  00187	83 c4 10	 add	 esp, 16			; 00000010H
  0018a	88 45 bb	 mov	 BYTE PTR _date_check$[ebp], al

; 22   :             if(!date_check){ cout << "Повторите ввод даты в формате ДДММГГГГ:"; }

  0018d	0f b6 45 bb	 movzx	 eax, BYTE PTR _date_check$[ebp]
  00191	85 c0		 test	 eax, eax
  00193	75 13		 jne	 SHORT $LN10@main
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LHMJEGCL@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@
  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a5	83 c4 08	 add	 esp, 8
$LN10@main:

; 23   :         }

  001a8	e9 f2 fe ff ff	 jmp	 $LN4@main
$LN5@main:

; 24   :         
; 25   :         cout << "1 – определение является ли год високосным; " << endl;

  001ad	8b f4		 mov	 esi, esp
  001af	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@HANHODJO@1?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?c?n?d@
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001c4	83 c4 08	 add	 esp, 8
  001c7	8b c8		 mov	 ecx, eax
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 26   :         cout << "2 – определение номера дня в году;" << endl;

  001d6	8b f4		 mov	 esi, esp
  001d8	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GHHGOGBE@2?5?$JG?5?n?o?p?e?d?e?k?e?m?h?e?5?m?n?l?e?p?$OA?5?d?m?$PP?5?b?5?c?n@
  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001ed	83 c4 08	 add	 esp, 8
  001f0	8b c8		 mov	 ecx, eax
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001f8	3b f4		 cmp	 esi, esp
  001fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   :         cout << "3 – вычислить сколько дней осталось дня рождения" << endl;

  001ff	8b f4		 mov	 esi, esp
  00201	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KOIEFGJD@3?5?$JG?5?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA@
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00216	83 c4 08	 add	 esp, 8
  00219	8b c8		 mov	 ecx, eax
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00221	3b f4		 cmp	 esi, esp
  00223	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   :         cout << "4 – выход из программы." << endl;

  00228	8b f4		 mov	 esi, esp
  0022a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FMILIMEF@4?5?$JG?5?b?$PL?u?n?d?5?h?g?5?o?p?n?c?p?$OA?l?l?$PL?4@
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0023f	83 c4 08	 add	 esp, 8
  00242	8b c8		 mov	 ecx, eax
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0024a	3b f4		 cmp	 esi, esp
  0024c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   :         cin >> k;

  00251	8b f4		 mov	 esi, esp
  00253	8d 45 c4	 lea	 eax, DWORD PTR _k$[ebp]
  00256	50		 push	 eax
  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00263	3b f4		 cmp	 esi, esp
  00265	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   :         switch (k)

  0026a	8b 45 c4	 mov	 eax, DWORD PTR _k$[ebp]
  0026d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
  00273	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv152[ebp]
  00279	83 e9 01	 sub	 ecx, 1
  0027c	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
  00282	83 bd a8 fe ff
	ff 03		 cmp	 DWORD PTR tv152[ebp], 3
  00289	0f 87 0d 06 00
	00		 ja	 $LN21@main
  0028f	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv152[ebp]
  00295	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN51@main[edx*4]
$LN11@main:

; 31   :         {
; 32   :         case 1:
; 33   :         {
; 34   :             cout << endl << "Идёт проверка..." << endl;

  0029c	8b f4		 mov	 esi, esp
  0029e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DHLHLGFA@?H?d?$LI?r?5?o?p?n?b?e?p?j?$OA?4?4?4@
  002a8	8b fc		 mov	 edi, esp
  002aa	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002bb	3b fc		 cmp	 edi, esp
  002bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002c8	83 c4 08	 add	 esp, 8
  002cb	8b c8		 mov	 ecx, eax
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002d3	3b f4		 cmp	 esi, esp
  002d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   :             if (LEAP_YEAR_CHECK(year)) { cout << year << " является вискосным годом!" << endl << endl; }

  002da	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  002e1	75 0d		 jne	 SHORT $LN31@main
  002e3	68 00 00 00 00	 push	 OFFSET $LN26@main
  002e8	e8 00 00 00 00	 call	 __RTC_UninitUse
  002ed	83 c4 04	 add	 esp, 4
$LN31@main:
  002f0	8b 45 d0	 mov	 eax, DWORD PTR _year$[ebp]
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ?LEAP_YEAR_CHECK@@YA_NH@Z ; LEAP_YEAR_CHECK
  002f9	83 c4 04	 add	 esp, 4
  002fc	0f b6 c8	 movzx	 ecx, al
  002ff	85 c9		 test	 ecx, ecx
  00301	74 6b		 je	 SHORT $LN12@main
  00303	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  0030a	75 0d		 jne	 SHORT $LN32@main
  0030c	68 00 00 00 00	 push	 OFFSET $LN26@main
  00311	e8 00 00 00 00	 call	 __RTC_UninitUse
  00316	83 c4 04	 add	 esp, 4
$LN32@main:
  00319	8b f4		 mov	 esi, esp
  0031b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00320	8b fc		 mov	 edi, esp
  00322	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OEJNGOKD@?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@
  0032c	8b dc		 mov	 ebx, esp
  0032e	8b 45 d0	 mov	 eax, DWORD PTR _year$[ebp]
  00331	50		 push	 eax
  00332	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00338	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0033e	3b dc		 cmp	 ebx, esp
  00340	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0034b	83 c4 08	 add	 esp, 8
  0034e	8b c8		 mov	 ecx, eax
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00356	3b fc		 cmp	 edi, esp
  00358	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035d	8b c8		 mov	 ecx, eax
  0035f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00365	3b f4		 cmp	 esi, esp
  00367	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036c	eb 69		 jmp	 SHORT $LN13@main
$LN12@main:

; 36   :             else{ cout << year << " не является вискосным годом!" << endl << endl; }

  0036e	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00375	75 0d		 jne	 SHORT $LN33@main
  00377	68 00 00 00 00	 push	 OFFSET $LN26@main
  0037c	e8 00 00 00 00	 call	 __RTC_UninitUse
  00381	83 c4 04	 add	 esp, 4
$LN33@main:
  00384	8b f4		 mov	 esi, esp
  00386	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0038b	8b fc		 mov	 edi, esp
  0038d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EOOBDIMN@?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?j?n?q?m?$PL?l?5?c?n?d?n?l?$CB@
  00397	8b dc		 mov	 ebx, esp
  00399	8b 45 d0	 mov	 eax, DWORD PTR _year$[ebp]
  0039c	50		 push	 eax
  0039d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003a9	3b dc		 cmp	 ebx, esp
  003ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b0	50		 push	 eax
  003b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003b6	83 c4 08	 add	 esp, 8
  003b9	8b c8		 mov	 ecx, eax
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003c1	3b fc		 cmp	 edi, esp
  003c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c8	8b c8		 mov	 ecx, eax
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003d0	3b f4		 cmp	 esi, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@main:

; 37   :         }break;

  003d7	e9 28 05 00 00	 jmp	 $LN6@main
$LN14@main:

; 38   :         case 2:
; 39   :         {
; 40   :             cout << endl << "Идёт проверка..." << endl;

  003dc	8b f4		 mov	 esi, esp
  003de	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DHLHLGFA@?H?d?$LI?r?5?o?p?n?b?e?p?j?$OA?4?4?4@
  003e8	8b fc		 mov	 edi, esp
  003ea	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003fb	3b fc		 cmp	 edi, esp
  003fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00408	83 c4 08	 add	 esp, 8
  0040b	8b c8		 mov	 ecx, eax
  0040d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00413	3b f4		 cmp	 esi, esp
  00415	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 41   :             if (LEAP_YEAR_DAY(year, month)) { cout << ' ' << day << '.' << month << " является " << DAY_NUMBER(day, month) + 1 << " днём в году!" << endl << endl; }

  0041a	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00421	75 0d		 jne	 SHORT $LN34@main
  00423	68 00 00 00 00	 push	 OFFSET $LN28@main
  00428	e8 00 00 00 00	 call	 __RTC_UninitUse
  0042d	83 c4 04	 add	 esp, 4
$LN34@main:
  00430	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00437	75 0d		 jne	 SHORT $LN35@main
  00439	68 00 00 00 00	 push	 OFFSET $LN26@main
  0043e	e8 00 00 00 00	 call	 __RTC_UninitUse
  00443	83 c4 04	 add	 esp, 4
$LN35@main:
  00446	8b 45 dc	 mov	 eax, DWORD PTR _month$[ebp]
  00449	50		 push	 eax
  0044a	8b 4d d0	 mov	 ecx, DWORD PTR _year$[ebp]
  0044d	51		 push	 ecx
  0044e	e8 00 00 00 00	 call	 ?LEAP_YEAR_DAY@@YA_NHH@Z ; LEAP_YEAR_DAY
  00453	83 c4 08	 add	 esp, 8
  00456	0f b6 d0	 movzx	 edx, al
  00459	85 d2		 test	 edx, edx
  0045b	0f 84 28 01 00
	00		 je	 $LN15@main
  00461	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00468	75 0d		 jne	 SHORT $LN36@main
  0046a	68 00 00 00 00	 push	 OFFSET $LN28@main
  0046f	e8 00 00 00 00	 call	 __RTC_UninitUse
  00474	83 c4 04	 add	 esp, 4
$LN36@main:
  00477	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0047e	75 0d		 jne	 SHORT $LN37@main
  00480	68 00 00 00 00	 push	 OFFSET $LN30@main
  00485	e8 00 00 00 00	 call	 __RTC_UninitUse
  0048a	83 c4 04	 add	 esp, 4
$LN37@main:
  0048d	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00494	75 0d		 jne	 SHORT $LN38@main
  00496	68 00 00 00 00	 push	 OFFSET $LN28@main
  0049b	e8 00 00 00 00	 call	 __RTC_UninitUse
  004a0	83 c4 04	 add	 esp, 4
$LN38@main:
  004a3	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  004aa	75 0d		 jne	 SHORT $LN39@main
  004ac	68 00 00 00 00	 push	 OFFSET $LN30@main
  004b1	e8 00 00 00 00	 call	 __RTC_UninitUse
  004b6	83 c4 04	 add	 esp, 4
$LN39@main:
  004b9	8b f4		 mov	 esi, esp
  004bb	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004c0	8b fc		 mov	 edi, esp
  004c2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004c7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HKCBJMLE@?5?d?m?$LI?l?5?b?5?c?n?d?s?$CB@
  004cc	8b 45 dc	 mov	 eax, DWORD PTR _month$[ebp]
  004cf	50		 push	 eax
  004d0	8b 4d e8	 mov	 ecx, DWORD PTR _day$[ebp]
  004d3	51		 push	 ecx
  004d4	e8 00 00 00 00	 call	 ?DAY_NUMBER@@YAHHH@Z	; DAY_NUMBER
  004d9	83 c4 08	 add	 esp, 8
  004dc	83 c0 01	 add	 eax, 1
  004df	8b dc		 mov	 ebx, esp
  004e1	50		 push	 eax
  004e2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MKFECEDL@?5?$PP?b?k?$PP?e?r?q?$PP?5@
  004e7	8b c4		 mov	 eax, esp
  004e9	8b 55 dc	 mov	 edx, DWORD PTR _month$[ebp]
  004ec	52		 push	 edx
  004ed	6a 2e		 push	 46			; 0000002eH
  004ef	8b cc		 mov	 ecx, esp
  004f1	8b 55 e8	 mov	 edx, DWORD PTR _day$[ebp]
  004f4	52		 push	 edx
  004f5	6a 20		 push	 32			; 00000020H
  004f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004fd	52		 push	 edx
  004fe	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv572[ebp], eax
  00504	89 8d a4 fe ff
	ff		 mov	 DWORD PTR tv574[ebp], ecx
  0050a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0050f	83 c4 08	 add	 esp, 8
  00512	8b c8		 mov	 ecx, eax
  00514	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0051a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv574[ebp]
  00520	3b cc		 cmp	 ecx, esp
  00522	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0052d	83 c4 08	 add	 esp, 8
  00530	8b c8		 mov	 ecx, eax
  00532	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00538	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv572[ebp]
  0053e	3b cc		 cmp	 ecx, esp
  00540	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0054b	83 c4 08	 add	 esp, 8
  0054e	8b c8		 mov	 ecx, eax
  00550	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00556	3b dc		 cmp	 ebx, esp
  00558	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00563	83 c4 08	 add	 esp, 8
  00566	8b c8		 mov	 ecx, eax
  00568	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0056e	3b fc		 cmp	 edi, esp
  00570	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00575	8b c8		 mov	 ecx, eax
  00577	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0057d	3b f4		 cmp	 esi, esp
  0057f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00584	e9 20 01 00 00	 jmp	 $LN16@main
$LN15@main:

; 42   :             else { cout << ' ' << day << '.' << month << " является " << DAY_NUMBER(day, month) << " днём в году!" << endl << endl; }

  00589	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00590	75 0d		 jne	 SHORT $LN40@main
  00592	68 00 00 00 00	 push	 OFFSET $LN28@main
  00597	e8 00 00 00 00	 call	 __RTC_UninitUse
  0059c	83 c4 04	 add	 esp, 4
$LN40@main:
  0059f	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  005a6	75 0d		 jne	 SHORT $LN41@main
  005a8	68 00 00 00 00	 push	 OFFSET $LN30@main
  005ad	e8 00 00 00 00	 call	 __RTC_UninitUse
  005b2	83 c4 04	 add	 esp, 4
$LN41@main:
  005b5	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  005bc	75 0d		 jne	 SHORT $LN42@main
  005be	68 00 00 00 00	 push	 OFFSET $LN28@main
  005c3	e8 00 00 00 00	 call	 __RTC_UninitUse
  005c8	83 c4 04	 add	 esp, 4
$LN42@main:
  005cb	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  005d2	75 0d		 jne	 SHORT $LN43@main
  005d4	68 00 00 00 00	 push	 OFFSET $LN30@main
  005d9	e8 00 00 00 00	 call	 __RTC_UninitUse
  005de	83 c4 04	 add	 esp, 4
$LN43@main:
  005e1	8b f4		 mov	 esi, esp
  005e3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005e8	8b fc		 mov	 edi, esp
  005ea	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005ef	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HKCBJMLE@?5?d?m?$LI?l?5?b?5?c?n?d?s?$CB@
  005f4	8b 45 dc	 mov	 eax, DWORD PTR _month$[ebp]
  005f7	50		 push	 eax
  005f8	8b 4d e8	 mov	 ecx, DWORD PTR _day$[ebp]
  005fb	51		 push	 ecx
  005fc	e8 00 00 00 00	 call	 ?DAY_NUMBER@@YAHHH@Z	; DAY_NUMBER
  00601	83 c4 08	 add	 esp, 8
  00604	8b dc		 mov	 ebx, esp
  00606	50		 push	 eax
  00607	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MKFECEDL@?5?$PP?b?k?$PP?e?r?q?$PP?5@
  0060c	8b c4		 mov	 eax, esp
  0060e	8b 55 dc	 mov	 edx, DWORD PTR _month$[ebp]
  00611	52		 push	 edx
  00612	6a 2e		 push	 46			; 0000002eH
  00614	8b cc		 mov	 ecx, esp
  00616	8b 55 e8	 mov	 edx, DWORD PTR _day$[ebp]
  00619	52		 push	 edx
  0061a	6a 20		 push	 32			; 00000020H
  0061c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00622	52		 push	 edx
  00623	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv576[ebp], eax
  00629	89 8d a4 fe ff
	ff		 mov	 DWORD PTR tv578[ebp], ecx
  0062f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00634	83 c4 08	 add	 esp, 8
  00637	8b c8		 mov	 ecx, eax
  00639	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0063f	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv578[ebp]
  00645	3b cc		 cmp	 ecx, esp
  00647	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0064c	50		 push	 eax
  0064d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00652	83 c4 08	 add	 esp, 8
  00655	8b c8		 mov	 ecx, eax
  00657	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0065d	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  00663	3b cc		 cmp	 ecx, esp
  00665	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0066a	50		 push	 eax
  0066b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00670	83 c4 08	 add	 esp, 8
  00673	8b c8		 mov	 ecx, eax
  00675	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0067b	3b dc		 cmp	 ebx, esp
  0067d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00682	50		 push	 eax
  00683	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00688	83 c4 08	 add	 esp, 8
  0068b	8b c8		 mov	 ecx, eax
  0068d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00693	3b fc		 cmp	 edi, esp
  00695	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0069a	8b c8		 mov	 ecx, eax
  0069c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  006a2	3b f4		 cmp	 esi, esp
  006a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN16@main:

; 43   :             
; 44   :         }break;

  006a9	e9 56 02 00 00	 jmp	 $LN6@main
$LN17@main:

; 45   :         case 3:
; 46   :         {
; 47   :             int birthday_date,b_day,b_month;
; 48   :             cout << "Введите дату дня рождения в формате ДДММ:";

  006ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KAKLFGFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?b?5?t?n?p@
  006b3	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006b8	50		 push	 eax
  006b9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006be	83 c4 08	 add	 esp, 8

; 49   :             
; 50   : 
; 51   :             date_check = false;

  006c1	c6 45 bb 00	 mov	 BYTE PTR _date_check$[ebp], 0
$LN8@main:

; 52   :             while (!date_check) {

  006c5	0f b6 45 bb	 movzx	 eax, BYTE PTR _date_check$[ebp]
  006c9	85 c0		 test	 eax, eax
  006cb	0f 85 81 01 00
	00		 jne	 $LN9@main

; 53   :                 cin >> birthday_date;

  006d1	8b f4		 mov	 esi, esp
  006d3	8d 45 ac	 lea	 eax, DWORD PTR _birthday_date$6[ebp]
  006d6	50		 push	 eax
  006d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  006dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  006e3	3b f4		 cmp	 esi, esp
  006e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 54   :                 b_day = birthday_date / 100;

  006ea	8b 45 ac	 mov	 eax, DWORD PTR _birthday_date$6[ebp]
  006ed	99		 cdq
  006ee	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  006f3	f7 f9		 idiv	 ecx
  006f5	89 45 a0	 mov	 DWORD PTR _b_day$5[ebp], eax

; 55   :                 b_month = birthday_date % 100;

  006f8	8b 45 ac	 mov	 eax, DWORD PTR _birthday_date$6[ebp]
  006fb	99		 cdq
  006fc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00701	f7 f9		 idiv	 ecx
  00703	89 55 94	 mov	 DWORD PTR _b_month$4[ebp], edx

; 56   :                 date_check = birthday_datecheck(b_day, b_month, year, birthday_date);

  00706	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  0070d	75 0d		 jne	 SHORT $LN44@main
  0070f	68 00 00 00 00	 push	 OFFSET $LN26@main
  00714	e8 00 00 00 00	 call	 __RTC_UninitUse
  00719	83 c4 04	 add	 esp, 4
$LN44@main:
  0071c	8b 45 ac	 mov	 eax, DWORD PTR _birthday_date$6[ebp]
  0071f	50		 push	 eax
  00720	8b 4d d0	 mov	 ecx, DWORD PTR _year$[ebp]
  00723	51		 push	 ecx
  00724	8b 55 94	 mov	 edx, DWORD PTR _b_month$4[ebp]
  00727	52		 push	 edx
  00728	8b 45 a0	 mov	 eax, DWORD PTR _b_day$5[ebp]
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?birthday_datecheck@@YA_NHHHH@Z ; birthday_datecheck
  00731	83 c4 10	 add	 esp, 16			; 00000010H
  00734	88 45 bb	 mov	 BYTE PTR _date_check$[ebp], al

; 57   :                 if (!date_check) { cout << "Повторите ввод даты в формате ДДММ:"; }

  00737	0f b6 45 bb	 movzx	 eax, BYTE PTR _date_check$[ebp]
  0073b	85 c0		 test	 eax, eax
  0073d	75 13		 jne	 SHORT $LN18@main
  0073f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HCGLHDCF@?O?n?b?r?n?p?h?r?e?5?b?b?n?d?5?d?$OA?r?$PL?5?b?5?t?n?p?l?$OA?r?e?5?D@
  00744	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00749	50		 push	 eax
  0074a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0074f	83 c4 08	 add	 esp, 8
$LN18@main:

; 58   :                 if ((BIRTHDAY_COUNT(day, month, year, b_day, b_month))!=1000) { cout << "До следующего дня рождения осталось: " << BIRTHDAY_COUNT(day, month, year, b_day, b_month) << " дней!"; }

  00752	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00759	75 0d		 jne	 SHORT $LN45@main
  0075b	68 00 00 00 00	 push	 OFFSET $LN26@main
  00760	e8 00 00 00 00	 call	 __RTC_UninitUse
  00765	83 c4 04	 add	 esp, 4
$LN45@main:
  00768	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  0076f	75 0d		 jne	 SHORT $LN46@main
  00771	68 00 00 00 00	 push	 OFFSET $LN28@main
  00776	e8 00 00 00 00	 call	 __RTC_UninitUse
  0077b	83 c4 04	 add	 esp, 4
$LN46@main:
  0077e	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00785	75 0d		 jne	 SHORT $LN47@main
  00787	68 00 00 00 00	 push	 OFFSET $LN30@main
  0078c	e8 00 00 00 00	 call	 __RTC_UninitUse
  00791	83 c4 04	 add	 esp, 4
$LN47@main:
  00794	8b 45 94	 mov	 eax, DWORD PTR _b_month$4[ebp]
  00797	50		 push	 eax
  00798	8b 4d a0	 mov	 ecx, DWORD PTR _b_day$5[ebp]
  0079b	51		 push	 ecx
  0079c	8b 55 d0	 mov	 edx, DWORD PTR _year$[ebp]
  0079f	52		 push	 edx
  007a0	8b 45 dc	 mov	 eax, DWORD PTR _month$[ebp]
  007a3	50		 push	 eax
  007a4	8b 4d e8	 mov	 ecx, DWORD PTR _day$[ebp]
  007a7	51		 push	 ecx
  007a8	e8 00 00 00 00	 call	 ?BIRTHDAY_COUNT@@YAHHHHHH@Z ; BIRTHDAY_COUNT
  007ad	83 c4 14	 add	 esp, 20			; 00000014H
  007b0	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  007b5	0f 84 92 00 00
	00		 je	 $LN19@main
  007bb	80 bd b3 fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  007c2	75 0d		 jne	 SHORT $LN48@main
  007c4	68 00 00 00 00	 push	 OFFSET $LN26@main
  007c9	e8 00 00 00 00	 call	 __RTC_UninitUse
  007ce	83 c4 04	 add	 esp, 4
$LN48@main:
  007d1	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  007d8	75 0d		 jne	 SHORT $LN49@main
  007da	68 00 00 00 00	 push	 OFFSET $LN28@main
  007df	e8 00 00 00 00	 call	 __RTC_UninitUse
  007e4	83 c4 04	 add	 esp, 4
$LN49@main:
  007e7	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  007ee	75 0d		 jne	 SHORT $LN50@main
  007f0	68 00 00 00 00	 push	 OFFSET $LN30@main
  007f5	e8 00 00 00 00	 call	 __RTC_UninitUse
  007fa	83 c4 04	 add	 esp, 4
$LN50@main:
  007fd	68 00 00 00 00	 push	 OFFSET ??_C@_06DLLCAMCB@?5?d?m?e?i?$CB@
  00802	8b 45 94	 mov	 eax, DWORD PTR _b_month$4[ebp]
  00805	50		 push	 eax
  00806	8b 4d a0	 mov	 ecx, DWORD PTR _b_day$5[ebp]
  00809	51		 push	 ecx
  0080a	8b 55 d0	 mov	 edx, DWORD PTR _year$[ebp]
  0080d	52		 push	 edx
  0080e	8b 45 dc	 mov	 eax, DWORD PTR _month$[ebp]
  00811	50		 push	 eax
  00812	8b 4d e8	 mov	 ecx, DWORD PTR _day$[ebp]
  00815	51		 push	 ecx
  00816	e8 00 00 00 00	 call	 ?BIRTHDAY_COUNT@@YAHHHHHH@Z ; BIRTHDAY_COUNT
  0081b	83 c4 14	 add	 esp, 20			; 00000014H
  0081e	8b f4		 mov	 esi, esp
  00820	50		 push	 eax
  00821	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IGLIBEAG@?D?n?5?q?k?e?d?s?$PO?y?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA@
  00826	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0082c	52		 push	 edx
  0082d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00832	83 c4 08	 add	 esp, 8
  00835	8b c8		 mov	 ecx, eax
  00837	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0083d	3b f4		 cmp	 esi, esp
  0083f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00844	50		 push	 eax
  00845	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0084a	83 c4 08	 add	 esp, 8
$LN19@main:

; 59   : 
; 60   :             }

  0084d	e9 73 fe ff ff	 jmp	 $LN8@main
$LN9@main:

; 61   :         }break;

  00852	e9 ad 00 00 00	 jmp	 $LN6@main
$LN20@main:

; 62   :         case 4:
; 63   :         {
; 64   :             cout << "Благодарим за пользование нашей продукцией!" << endl << endl;

  00857	8b f4		 mov	 esi, esp
  00859	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0085e	8b fc		 mov	 edi, esp
  00860	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00865	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@DOBBBOAA@?A?k?$OA?c?n?d?$OA?p?h?l?5?g?$OA?5?o?n?k?$PM?g?n?b?$OA?m?h?e?5?m?$OA?x?e?i@
  0086a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0086f	50		 push	 eax
  00870	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00875	83 c4 08	 add	 esp, 8
  00878	8b c8		 mov	 ecx, eax
  0087a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00880	3b fc		 cmp	 edi, esp
  00882	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00887	8b c8		 mov	 ecx, eax
  00889	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0088f	3b f4		 cmp	 esi, esp
  00891	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   :             return 0;

  00896	33 c0		 xor	 eax, eax
  00898	eb 75		 jmp	 SHORT $LN23@main

; 66   :         }break;

  0089a	eb 68		 jmp	 SHORT $LN6@main
$LN21@main:

; 67   :         default: 
; 68   :         {
; 69   :             cout << "Вами была введена неопазнаная комманда. Для использования данного продукта используйте цифры 1-4" << endl;

  0089c	8b f4		 mov	 esi, esp
  0089e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  008a3	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@IFHIMGON@?B?$OA?l?h?5?a?$PL?k?$OA?5?b?b?e?d?e?m?$OA?5?m?e?n?o?$OA?g?m?$OA?m?$OA?$PP?5?j@
  008a8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  008ad	50		 push	 eax
  008ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  008b3	83 c4 08	 add	 esp, 8
  008b6	8b c8		 mov	 ecx, eax
  008b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  008be	3b f4		 cmp	 esi, esp
  008c0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   :             cout << "Повторите ваш ввод" << endl << endl;

  008c5	8b f4		 mov	 esi, esp
  008c7	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  008cc	8b fc		 mov	 edi, esp
  008ce	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  008d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EFHGFFAL@?O?n?b?r?n?p?h?r?e?5?b?$OA?x?5?b?b?n?d@
  008d8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  008dd	50		 push	 eax
  008de	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  008e3	83 c4 08	 add	 esp, 8
  008e6	8b c8		 mov	 ecx, eax
  008e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  008ee	3b fc		 cmp	 edi, esp
  008f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008f5	8b c8		 mov	 ecx, eax
  008f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  008fd	3b f4		 cmp	 esi, esp
  008ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@main:

; 71   :         }
; 72   :         }
; 73   :     }

  00904	e9 8c f7 ff ff	 jmp	 $LN2@main
$LN3@main:

; 74   : 
; 75   : }

  00909	eb 02		 jmp	 SHORT $LN24@main
  0090b	eb 02		 jmp	 SHORT $LN23@main
$LN24@main:
  0090d	33 c0		 xor	 eax, eax
$LN23@main:
  0090f	52		 push	 edx
  00910	8b cd		 mov	 ecx, ebp
  00912	50		 push	 eax
  00913	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN56@main
  00919	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0091e	58		 pop	 eax
  0091f	5a		 pop	 edx
  00920	5f		 pop	 edi
  00921	5e		 pop	 esi
  00922	5b		 pop	 ebx
  00923	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00926	33 cd		 xor	 ecx, ebp
  00928	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0092d	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  00933	3b ec		 cmp	 ebp, esp
  00935	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0093a	8b e5		 mov	 esp, ebp
  0093c	5d		 pop	 ebp
  0093d	c3		 ret	 0
  0093e	66 90		 npad	 2
$LN56@main:
  00940	03 00 00 00	 DD	 3
  00944	00 00 00 00	 DD	 $LN55@main
$LN55@main:
  00948	f4 ff ff ff	 DD	 -12			; fffffff4H
  0094c	04 00 00 00	 DD	 4
  00950	00 00 00 00	 DD	 $LN52@main
  00954	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00958	04 00 00 00	 DD	 4
  0095c	00 00 00 00	 DD	 $LN53@main
  00960	ac ff ff ff	 DD	 -84			; ffffffacH
  00964	04 00 00 00	 DD	 4
  00968	00 00 00 00	 DD	 $LN54@main
$LN54@main:
  0096c	62		 DB	 98			; 00000062H
  0096d	69		 DB	 105			; 00000069H
  0096e	72		 DB	 114			; 00000072H
  0096f	74		 DB	 116			; 00000074H
  00970	68		 DB	 104			; 00000068H
  00971	64		 DB	 100			; 00000064H
  00972	61		 DB	 97			; 00000061H
  00973	79		 DB	 121			; 00000079H
  00974	5f		 DB	 95			; 0000005fH
  00975	64		 DB	 100			; 00000064H
  00976	61		 DB	 97			; 00000061H
  00977	74		 DB	 116			; 00000074H
  00978	65		 DB	 101			; 00000065H
  00979	00		 DB	 0
$LN53@main:
  0097a	6b		 DB	 107			; 0000006bH
  0097b	00		 DB	 0
$LN52@main:
  0097c	64		 DB	 100			; 00000064H
  0097d	61		 DB	 97			; 00000061H
  0097e	74		 DB	 116			; 00000074H
  0097f	65		 DB	 101			; 00000065H
  00980	00		 DB	 0
$LN30@main:
  00981	64		 DB	 100			; 00000064H
  00982	61		 DB	 97			; 00000061H
  00983	79		 DB	 121			; 00000079H
  00984	00		 DB	 0
$LN28@main:
  00985	6d		 DB	 109			; 0000006dH
  00986	6f		 DB	 111			; 0000006fH
  00987	6e		 DB	 110			; 0000006eH
  00988	74		 DB	 116			; 00000074H
  00989	68		 DB	 104			; 00000068H
  0098a	00		 DB	 0
$LN26@main:
  0098b	79		 DB	 121			; 00000079H
  0098c	65		 DB	 101			; 00000065H
  0098d	61		 DB	 97			; 00000061H
  0098e	72		 DB	 114			; 00000072H
  0098f	00		 DB	 0
$LN51@main:
  00990	00 00 00 00	 DD	 $LN11@main
  00994	00 00 00 00	 DD	 $LN14@main
  00998	00 00 00 00	 DD	 $LN17@main
  0099c	00 00 00 00	 DD	 $LN20@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 471  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __33925EC6_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 472  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 473  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __33925EC6_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 464  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 465  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Soft\Microsoft Visual Studio\VC\Tools\MSVC\14.33.31629\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __33925EC6_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // _HAS_U8_INTRINSICS
; 395  :         } else
; 396  : #endif // __cpp_char8_t
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // _HAS_CXX17
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 402  : #endif // _HAS_CXX17
; 403  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 sem\KPO\Labs\1 lab\lab1\first task\first task.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7EACE690_first task@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\BSTU\2 sem\KPO\Labs\1 lab\lab1\first task\first task.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7EACE690_first task@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
